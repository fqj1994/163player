#!/bin/bash

# Music Player for Netease Music

WORKDIR=$HOME/.163player

if [[ ! -d "$WORKDIR" ]]; then
    mkdir -p "$WORKDIR" || exit;
fi
if [[ ! -d "$WORKDIR/info" ]]; then
    mkdir -p "$WORKDIR/info" || exit;
fi
if [[ ! -d "$WORKDIR/music" ]]; then
    mkdir -p "$WORKDIR/music" || exit;
fi
if [[ ! -d "$WORKDIR/lyrics" ]]; then
    mkdir -p "$WORKDIR/lyrics" || exit;
fi


check_dependencies() {
    which base64 || exit;
    which mpv || exit;
    which notify-send || exit;
    which curl || exit;
    which jq || exit;
    which socat || exit;
}

retrive_info() {
    _ID=$1
    if [[ ! -s "$WORKDIR/info/$_ID.json" ]]; then
        curl -s "http://music.163.com/api/song/detail/?id=$_ID&ids=\[$_ID\]" -o "$WORKDIR/info/$_ID.json"
    fi
}

retrive_music() {
    _ID=$1
    if [[ ! -s "$WORKDIR/music/$_ID.mp3" ]]; then
        URL=$(cat "$WORKDIR/info/$_ID.json" | jq ".songs[0].mp3Url")
        if [[ "$URL" == "null" ]]; then
            return 1
        fi
        curl -L "$(echo $URL | sed -e 's/^\"\(.*\)\"$/\1/g')" -o "$WORKDIR/music/$_ID.mp3.tmp"
        mv "$WORKDIR/music/$_ID.mp3.tmp" "$WORKDIR/music/$_ID.mp3"
    fi
    return 0
}

retrive_lyrics() {
    _ID=$1
    if [[ ! -s "$WORKDIR/lyrics/$_ID.lrc" ]]; then
        LRC="$(curl -s "http://music.163.com/api/song/lyric?id=$_ID&lv=-1&tv=-1&csrf_token=" -H "Referer: http://music.163.com/" | jq ".lrc.lyric" -r)"
        if [[ "$LRC" == "null" ]]; then
            return 1
        fi
        echo "$LRC" > "$WORKDIR/lyrics/$_ID.lrc"
    fi
}

play() {
    notify-send "Playing $(cat $WORKDIR/info/$_ID.json | jq '.songs[0].name' -r)"
    mpv "$WORKDIR/music/$_ID.mp3" -vo null --input-unix-socket=/tmp/163player-$1
    rm /tmp/163player-$1
}

handle_lyrics() {
    sleep 1
    _ID=$1
    _handle_lyrics() {
        LYRICS="$(cat $WORKDIR/lyrics/$_ID.lrc)"
        echo 0 > /tmp/lastqtime-$_ID
        while true; do
            read P || break;
            if [[ "$P" == "null" ]]; then
                continue
            fi
            echo "$LYRICS" | (
                while read Q; do
                    QMIN=$(echo "$Q" | sed -e 's/^\[\([0-9]*\).*/\1/g' | sed -e 's/^0*//g')
                    QSEC=$(echo "$Q" | sed -e 's/^\[[0-9]*:\([0-9]*\).*/\1/g' | sed -e 's/^0*//g')
                    QTIME=$((QMIN*60+QSEC))
                    PTIME=$(echo "$P" | sed -e 's/\..*//g')
                    if [[ "$QTIME" -le "$PTIME" ]]; then
                        if [[ "$QTIME" -ge "$(cat /tmp/lastqtime-$_ID)" ]]; then
                            LYRICCONTENT=$(echo "$Q" | sed -e 's/^\[[0-9\.:]*\]//g')
                            if [[ "$LYRICCONTENT" != "" ]]; then
                                notify-send -t 1000 "$Q"
                            fi
                            echo "$QTIME" > /tmp/lastqtime-$_ID
                        fi
                    fi
                done
            )
        done
        rm /tmp/lastqtime-$_ID
    }
    ( while true; do echo '{ "command": ["get_property", "playback-time"] }'; sleep 1; done) | socat - /tmp/163player-$1 2>/dev/null | jq --unbuffered ".data"  | _handle_lyrics
}


play_music() {
    retrive_info "$1"
    retrive_music "$1"
    retrive_lyrics "$1"
    handle_lyrics "$1" &
    play "$1"
}

usage() {
    echo "Usage: "
    echo "    $0 <music-id>"
    echo "    $0 --playlist [--shuffle] <path-to-playlist>"
    echo
    echo "Use your shell's for-loop or while-loop control sequence to do auto replay."
    exit 1
}

sigint() {
    rm /tmp/163player-*
    rm /tmp/lastqtime-*
    exit 0
}

trap sigint INT 

check_dependencies >/dev/null

if echo "$1" | egrep "^[0-9]+$" >/dev/null; then
    play_music "$1"
    exit
fi

if [[ "$1" == "--playlist" ]]; then
    PLAYLIST="$(cat "${@: -1}")"
    if [[ "$2" == "--shuffle" ]]; then
        PLAYLIST="$(echo "$PLAYLIST" | sort -R)"
    fi
    for i in $PLAYLIST; do
        (echo "$i" | egrep "^[0-9]+$" >/dev/null) && play_music "$i";
    done
    exit
fi


usage
